// ุฏุงูุฉ ููุญุฏุฉ ูุญุณุงุจ ุงูุฃุฑุตุฏุฉ ูู ุฌููุน ุงูุตูุญุงุช ุญุณุจ ุงููุธุงู ุงููุญุงุณุจู ุงูุฌุฏูุฏ
function calculateUnifiedBalances(revenues, expenses, driverPayments, drivers) {
    console.log('๐ ุจุฏุก ุญุณุงุจ ุงูุฃุฑุตุฏุฉ ุงูููุญุฏุฉ...');
    console.log('๐ ุงูุจูุงูุงุช:', {
        revenues: revenues?.length || 0,
        expenses: expenses?.length || 0,
        driverPayments: driverPayments?.length || 0,
        drivers: drivers?.length || 0
    });
    
    let bankBalance = 0;
    let salaryBalance = 0;
    let totalDriverDebts = 0;
    let totalRevenues = 0;
    let totalExpenses = 0;

    // ุญุณุงุจ ุงูุฅูุฑุงุฏุงุช ุงูุนุงุฏูุฉ
    if (revenues && revenues.length > 0) {
        totalRevenues = revenues.reduce((sum, revenue) => sum + parseFloat(revenue.amount || 0), 0);
        bankBalance += totalRevenues;
    }

    // ุญุณุงุจ ุงููุตุฑููุงุช ุงูุนุงุฏูุฉ
    if (expenses && expenses.length > 0) {
        totalExpenses = expenses.reduce((sum, expense) => {
            const amount = parseFloat(expense.amount || 0);
            if (expense.type === 'ูุตุงุฑูู ุฅูุฏุงุนุงุช ุงูุฑูุงุชุจ') {
                // ูุตุงุฑูู ุฅูุฏุงุนุงุช ุงูุฑูุงุชุจ ุชุฎุตู ูู ุงูุฑุตูุฏ ุงูุจููู ูุฑุตูุฏ ุงูุฑูุงุชุจ
                bankBalance -= amount;
                salaryBalance -= amount;
            } else {
                bankBalance -= amount;
            }
            return sum + amount;
        }, 0);
    }

    // ุญุณุงุจ ุฏูุนุงุช ุงูุณุงุฆููู ุญุณุจ ุงููุธุงู ุงููุญุงุณุจู ุงูุฌุฏูุฏ
    if (driverPayments && driverPayments.length > 0) {
        driverPayments.forEach(payment => {
            const amount = parseFloat(payment.amount) || 0;
            
            switch(payment.type) {
                // ุฏูุนุงุช ุชุฒูุฏ ุงูุฑุตูุฏ ุงูุจููู (ุชุญุตูู ูู ุงูุณุงุฆู)
                case 'ุฃุฌุฑุฉ ููููุฉ':
                case 'ุชุญุตูู ูุฎุงููุฉ':
                case 'ุชุญุตูู ุฑุณูู ุฅูุงูุฉ':
                case 'ุฏูู ูุฏูู':
                    bankBalance += amount;
                    break;
                
                // ุฏูุนุงุช ุชููุต ุงูุฑุตูุฏ ุงูุจููู (ุงูุดุฑูุฉ ุชุฏูุน)
                case 'ุณุฏุงุฏ ูุฎุงููุฉ':
                case 'ุณุฏุงุฏ ุฑุณูู ุฅูุงูุฉ':
                    bankBalance -= amount;
                    break;
                
                // ุฑุณูู ุงูุฑูุงุชุจ (ูุธุงู ูููุตู)
                case 'ุชุญุตูู ุฑุณูู ุฑูุงุชุจ':
                case 'ุชุญุตูู ุฑุณูู ุฅูุฏุงุนุงุช ุงูุฑูุงุชุจ':
                    // ุชุถุงู ููุฑุตูุฏ ุงูุจููู ูุฑุตูุฏ ุงูุฑูุงุชุจ
                    bankBalance += amount;
                    salaryBalance += amount;
                    break;
                case 'ุณุฏุงุฏ ุฑูุงุชุจ':
                    salaryBalance -= amount;
                    break;
            }
        });
    }

    // ุญุณุงุจ ุฏููู ุงูุณุงุฆููู ุญุณุจ ุงููุธุงู ุงูุฌุฏูุฏ
    if (drivers && drivers.length > 0) {
        drivers.forEach(driver => {
            try {
                const driverDebts = calculateDriverDebt(driver.id, driver, driverPayments);
                totalDriverDebts += driverDebts;
            } catch (error) {
                console.error('ุฎุทุฃ ูู ุญุณุงุจ ุฏูู ุงูุณุงุฆู:', driver.name || driver.id, error);
                // ูุชุฌุงูู ูุฐุง ุงูุณุงุฆู ููููู ูุน ุงูุจุงูู
            }
        });
    }

    console.log('โ ุงูุชูู ุญุณุงุจ ุงูุฃุฑุตุฏุฉ:', {
        bankBalance: bankBalance.toFixed(3),
        salaryBalance: salaryBalance.toFixed(3),
        totalDriverDebts: totalDriverDebts.toFixed(3),
        totalRevenues: totalRevenues.toFixed(3),
        totalExpenses: totalExpenses.toFixed(3)
    });
    
    return {
        bankBalance: bankBalance,
        salaryBalance: salaryBalance,
        totalDriverDebts: totalDriverDebts,
        totalRevenues: totalRevenues,
        totalExpenses: totalExpenses
    };
}

// ุฏุงูุฉ ููุญุฏุฉ ูุญุณุงุจ ุฏููู ุงูุณุงุฆู ุญุณุจ ุงููุธุงู ุงููุญุงุณุจู ุงูุฌุฏูุฏ
function calculateDriverDebt(driverId, driver, driverPayments) {
    let totalDebt = 0;
    
    // ุงูุญุตูู ุนูู ูุฏููุนุงุช ุงูุณุงุฆู
    const payments = driverPayments ? driverPayments.filter(payment => payment.driverId === driverId) : [];
    
    // 1. ุญุณุงุจ ุงูุฃุฌุฑุฉ ุงูููููุฉ ุงููุชุฃุฎุฑุฉ
    const today = new Date();
    const contractStart = driver.contractStartDate ? 
        (driver.contractStartDate.toDate ? driver.contractStartDate.toDate() : new Date(driver.contractStartDate)) :
        (driver.createdAt ? (driver.createdAt.toDate ? driver.createdAt.toDate() : new Date(driver.createdAt)) : today);
    
    const daysSinceStart = Math.floor((today - contractStart) / (1000 * 60 * 60 * 24));
    const dailyWage = parseFloat(driver.dailyWage || driver.dailyRent || 0);
    const expectedTotal = daysSinceStart * dailyWage;
    
    // ุญุณุงุจ ุฅุฌูุงูู ุงูุฃุฌุฑุฉ ุงูููููุฉ ุงููุฏููุนุฉ
    const dailyRentPayments = payments.filter(p => p.type === 'ุฃุฌุฑุฉ ููููุฉ');
    const totalDailyRentPaid = dailyRentPayments.reduce((sum, p) => sum + parseFloat(p.amount || 0), 0);
    
    // ุงูุฃุฌุฑุฉ ุงููุชุฃุฎุฑุฉ = ุงููุชููุน - ุงููุฏููุน
    const lateRent = Math.max(0, expectedTotal - totalDailyRentPaid);
    totalDebt += lateRent;
    
    // 2. ุญุณุงุจ ุงูุฏููู ูู ุงููุฏููุนุงุช ุงูุฃุฎุฑู
    payments.forEach(payment => {
        const amount = parseFloat(payment.amount || 0);
        
        switch(payment.type) {
            // ุงูุนูููุงุช ุงูุชู ุชุฒูุฏ ุงูุฏูู (ุงูุดุฑูุฉ ุฏูุนุช ุนู ุงูุณุงุฆู)
            case 'ุณุฏุงุฏ ูุฎุงููุฉ':
            case 'ุณุฏุงุฏ ุฑุณูู ุฅูุงูุฉ':
            case 'ุณุฏุงุฏ ุฑุณูู ุฑูุงุชุจ':
                totalDebt += amount;
                break;
            
            // ุงูุนูููุงุช ุงูุชู ุชููุต ุงูุฏูู (ุงูุณุงุฆู ุฏูุน)
            case 'ุชุญุตูู ูุฎุงููุฉ':
            case 'ุชุญุตูู ุฑุณูู ุฅูุงูุฉ':
                totalDebt -= amount;
                break;
            
            // ุชุญุตูู ุฑุณูู ุงูุฑูุงุชุจ ูุง ูุคุซุฑ ุนูู ุฏูู ุงูุณุงุฆู
            case 'ุชุญุตูู ุฑุณูู ุฑูุงุชุจ':
            case 'ุชุญุตูู ุฑุณูู ุฅูุฏุงุนุงุช ุงูุฑูุงุชุจ':
                // ูุง ูุคุซุฑ ุนูู ุงูุฏูู
                break;
            
            // ุงูุฏููู ุงููุฏููุฉ (ุชููุต ุงูุฏูู ุนูุฏ ุงูุชุญุตูู)
            case 'ุฏูู ูุฏูู':
                totalDebt -= amount;
                break;
            
            // ุงูุฃุฌุฑุฉ ุงูููููุฉ ุชู ุญุณุงุจูุง ุฃุนูุงู
            case 'ุฃุฌุฑุฉ ููููุฉ':
                // ูุง ููุนู ุดูุก ููุง ูุฃููุง ูุญุณูุจุฉ ูู lateRent
                break;
            
            // ุฏูุน ุงูุฑูุงุชุจ ูุง ูุคุซุฑ ุนูู ุฏูู ุงูุณุงุฆู
            case 'ุณุฏุงุฏ ุฑูุงุชุจ':
                // ูุง ูุคุซุฑ ุนูู ุฏูู ุงูุณุงุฆู
                break;
        }
    });
    
    // 3. ุฅุถุงูุฉ ุงูุฏููู ุงููุฏููุฉ ุงููุณุฌูุฉ ุนูุฏ ุฅุถุงูุฉ ุงูุณุงุฆู
    const oldDebts = parseFloat(driver.oldDebts || 0);
    totalDebt += oldDebts;
    
    // ุงูุฏูู ูุง ูููู ุฃู ูููู ุณุงูุจ
    return Math.max(0, totalDebt);
}

// ุฏุงูุฉ ููุญุฏุฉ ูุชุญุฏูุซ ุนุฑุถ ุงูุฃุฑุตุฏุฉ
function updateBalanceDisplay(balances) {
    // ุชุญุฏูุซ ุงูุฑุตูุฏ ุงูุจููู
    const bankBalanceElement = document.getElementById('bankBalance');
    if (bankBalanceElement) {
        bankBalanceElement.textContent = balances.bankBalance.toFixed(3) + ' ุฏ.ู';
        // ุชุบููุฑ ุงูููู ุญุณุจ ุงูุฑุตูุฏ
        if (balances.bankBalance < 0) {
            bankBalanceElement.style.color = '#dc3545'; // ุฃุญูุฑ ููุฑุตูุฏ ุงูุณุงูุจ
        } else {
            bankBalanceElement.style.color = '#28a745'; // ุฃุฎุถุฑ ููุฑุตูุฏ ุงูููุฌุจ
        }
    }

    // ุชุญุฏูุซ ุฑุตูุฏ ุงูุฑูุงุชุจ
    const salaryBalanceElement = document.getElementById('salaryBalance');
    if (salaryBalanceElement) {
        salaryBalanceElement.textContent = balances.salaryBalance.toFixed(3) + ' ุฏ.ู';
        // ุชุบููุฑ ุงูููู ุญุณุจ ุงูุฑุตูุฏ
        if (balances.salaryBalance < 0) {
            salaryBalanceElement.style.color = '#dc3545'; // ุฃุญูุฑ ููุฑุตูุฏ ุงูุณุงูุจ
        } else {
            salaryBalanceElement.style.color = '#28a745'; // ุฃุฎุถุฑ ููุฑุตูุฏ ุงูููุฌุจ
        }
    }

    // ุชุญุฏูุซ ุฏููู ุงูุณุงุฆููู (ููุชูุงูู ูุน ุงูุตูุญุงุช ุงููุฏููุฉ)
    const driverDebtsElement = document.getElementById('driverDebts');
    if (driverDebtsElement) {
        driverDebtsElement.textContent = balances.totalDriverDebts.toFixed(3) + ' ุฏ.ู';
        // ุฏููู ุงูุณุงุฆููู ุฏุงุฆูุงู ุจุงูููู ุงูุฃุญูุฑ ุฅุฐุง ูุงูุช ุฃูุจุฑ ูู ุตูุฑ
        if (balances.totalDriverDebts > 0) {
            driverDebtsElement.style.color = '#dc3545';
        } else {
            driverDebtsElement.style.color = '#28a745';
        }
    }

    // ุชุญุฏูุซ ุฅุฌูุงูู ุงูุฏููู (ุงูุงุณู ุงูุฌุฏูุฏ)
    const totalDebtElement = document.getElementById('totalDebt');
    if (totalDebtElement) {
        totalDebtElement.textContent = balances.totalDriverDebts.toFixed(3) + ' ุฏ.ู';
        // ุฏููู ุงูุณุงุฆููู ุฏุงุฆูุงู ุจุงูููู ุงูุฃุญูุฑ ุฅุฐุง ูุงูุช ุฃูุจุฑ ูู ุตูุฑ
        if (balances.totalDriverDebts > 0) {
            totalDebtElement.style.color = '#dc3545';
        } else {
            totalDebtElement.style.color = '#28a745';
        }
    }

    // ุชุญุฏูุซ ุฅุฌูุงูู ุงูุฅูุฑุงุฏุงุช
    const totalRevenuesElement = document.getElementById('totalRevenues');
    if (totalRevenuesElement) {
        totalRevenuesElement.textContent = balances.totalRevenues.toFixed(3) + ' ุฏ.ู';
        totalRevenuesElement.style.color = '#28a745'; // ุฃุฎุถุฑ ููุฅูุฑุงุฏุงุช
    }

    // ุชุญุฏูุซ ุฅุฌูุงูู ุงููุตุฑููุงุช
    const totalExpensesElement = document.getElementById('totalExpenses');
    if (totalExpensesElement) {
        totalExpensesElement.textContent = balances.totalExpenses.toFixed(3) + ' ุฏ.ู';
        totalExpensesElement.style.color = '#dc3545'; // ุฃุญูุฑ ูููุตุฑููุงุช
    }
}

// ุฏุงูุฉ ูุญุณุงุจ ุตุงูู ุงูุฑุจุญ/ุงูุฎุณุงุฑุฉ
function calculateNetProfit(balances) {
    return balances.totalRevenues - balances.totalExpenses;
}

// ุฏุงูุฉ ูุชุญุฏูุซ ุนุฑุถ ุตุงูู ุงูุฑุจุญ
function updateNetProfitDisplay(balances) {
    const netProfitElement = document.getElementById('netProfit');
    if (netProfitElement) {
        const netProfit = calculateNetProfit(balances);
        netProfitElement.textContent = netProfit.toFixed(3) + ' ุฏ.ู';
        
        // ุชุบููุฑ ุงูููู ุญุณุจ ุงูุฑุจุญ/ุงูุฎุณุงุฑุฉ
        if (netProfit < 0) {
            netProfitElement.style.color = '#dc3545'; // ุฃุญูุฑ ููุฎุณุงุฑุฉ
        } else {
            netProfitElement.style.color = '#28a745'; // ุฃุฎุถุฑ ููุฑุจุญ
        }
    }
}

// ุฏุงูุฉ ูุชุทุจูู ุชุฌุฏูุฏ ุงูุฅูุงูุฉ ุงูุชููุงุฆู (30 ุฏููุงุฑ ุณูููุงู)
async function applyAnnualResidencyRenewal(db, drivers) {
    const currentYear = new Date().getFullYear();
    
    for (const driver of drivers) {
        // ุงูุชุญูู ูู ุขุฎุฑ ุชุฌุฏูุฏ ุฅูุงูุฉ ููุณุงุฆู
        const lastRenewal = await getLastResidencyRenewal(db, driver.id, currentYear);
        
        if (!lastRenewal) {
            // ุฅุถุงูุฉ ุฑุณูู ุชุฌุฏูุฏ ุงูุฅูุงูุฉ ุงูุชููุงุฆูุฉ
            const renewalPayment = {
                driverId: driver.id,
                type: 'ุณุฏุงุฏ ุฑุณูู ุฅูุงูุฉ',
                amount: 30.000,
                date: `${currentYear}-01-01`,
                description: `ุชุฌุฏูุฏ ุฅูุงูุฉ ุชููุงุฆู - ${currentYear}`,
                notes: 'ุชุฌุฏูุฏ ุชููุงุฆู ุณููู',
                timestamp: firebase.firestore.FieldValue.serverTimestamp()
            };
            
            await db.collection('driverPayments').add(renewalPayment);
        }
    }
}

// ุฏุงูุฉ ููุชุญูู ูู ุขุฎุฑ ุชุฌุฏูุฏ ุฅูุงูุฉ
async function getLastResidencyRenewal(db, driverId, year) {
    const snapshot = await db.collection('driverPayments')
        .where('driverId', '==', driverId)
        .where('type', '==', 'ุณุฏุงุฏ ุฑุณูู ุฅูุงูุฉ')
        .where('date', '>=', `${year}-01-01`)
        .where('date', '<=', `${year}-12-31`)
        .get();
    
    return !snapshot.empty;
}



// ุฏุงูุฉ ุญุณุงุจ ุฑุตูุฏ ุงูุณุงุฆู ุงูุฐูู
function calculateDriverBalance(driverId, driverPayments, dailyRate) {
    if (!driverPayments || !dailyRate) return 0;
    
    // ููุชุฑุฉ ุฏูุนุงุช ุงูุณุงุฆู ุงููุญุฏุฏ
    const payments = driverPayments.filter(payment => payment.driverId === driverId);
    
    // ุชุฑุชูุจ ุงูุฏูุนุงุช ุญุณุจ ุงูุชุงุฑูุฎ (ุงูุฃูุฏู ุฃููุงู)
    payments.sort((a, b) => {
        const dateA = new Date(a.date || a.timestamp);
        const dateB = new Date(b.date || b.timestamp);
        return dateA - dateB;
    });
    
    let currentBalance = 0;
    
    // ุญุณุงุจ ุงูุฑุตูุฏ ูู ุฌููุน ุงูุฏูุนุงุช
    payments.forEach(payment => {
        const amount = parseFloat(payment.amount) || 0;
        
        // ููุท ุฏูุนุงุช ุงูุฃุฌุฑุฉ ุงูููููุฉ ุชุคุซุฑ ุนูู ุงูุฑุตูุฏ
        if (payment.type === 'ุฃุฌุฑุฉ ููููุฉ') {
            currentBalance += amount;
            
            // ุชุทุจูู ูุงุนุฏุฉ ุงูุญุฏ ุงูุฃูุตู (ูุง ูุชุนุฏู ุงูุฃุฌุฑุฉ ุงูููููุฉ)
            while (currentBalance >= dailyRate) {
                currentBalance -= dailyRate;
                // ููุง ูุชู ุชุณุฌูู ููู ูุฏููุน (ูููู ุฅุถุงูุฉ ููุทู ุฅุถุงูู ูุงุญูุงู)
            }
        }
    });
    
    return currentBalance;
}

// ุฏุงูุฉ ุญุณุงุจ ุนุฏุฏ ุงูุฃูุงู ุงููุฏููุนุฉ ูู ุงูุฑุตูุฏ
function calculatePaidDaysFromBalance(driverId, driverPayments, dailyRate) {
    if (!driverPayments || !dailyRate) return 0;
    
    const payments = driverPayments.filter(payment => 
        payment.driverId === driverId && payment.type === 'ุฃุฌุฑุฉ ููููุฉ'
    );
    
    const totalPaid = payments.reduce((sum, payment) => sum + (parseFloat(payment.amount) || 0), 0);
    return Math.floor(totalPaid / dailyRate);
}

